  [errosWith50Test,errosWith50Train]=testLambdaWith(50);  [errosWith1000Test,errosWith1000Train]=testLambdaWith(1000);  range =[-10:10];  hold on  plot(range, errosWith50Train, 'LineWidth', 2);  plot(range, errosWith50Test,  'LineWidth', 3);  plot(range, errosWith1000Train, 'LineWidth', 2);  plot(range, errosWith1000Test,  'LineWidth', 3);  xlabel ("training sample sizes");  legend('3/5 training error - 50 Samples', '3/5 test error - 50 Samples', '3/5 training error - 1000 Samples', '3/5 test error - 1000 Samples');  function [errorPerGamaOnTest,errorPerGamaOnTrain] = testLambdaWith(m)  load("mnist_all.mat");  [Xtrain,Ytrain,Xtest,Ytest] = gensmallm(train3, train5, test3, test5, m);  lambda = arrayfun(@(x) 10^x,[-10:10]);  d=length(Xtrain(1,:));  wPerGama = arrayfun(@(lamb) softsvm(lamb,m,d,Xtrain,Ytrain), lambda, 'uniformoutput',false);  h = @(w) @(x) sign(dot(w,x)) ;  errorPerGamaOnTest = cell2mat(cellfun(@(w) errorRate(h,w,Xtest,Ytest), wPerGama, 'uniformoutput',false));  errorPerGamaOnTrain= cell2mat(cellfun(@(w) errorRate(h,w,Xtrain,Ytrain), wPerGama, 'uniformoutput',false));  end